--- Kalman.h
+++ Kalman.h
@@ -23,37 +23,37 @@
     Kalman();
 
     // The angle should be in degrees and the rate should be in degrees per second and the delta time in seconds
-    float getAngle(float newAngle, float newRate, float dt);
+    double getAngle(double newAngle, double newRate, double dt);
 
-    void setAngle(float angle); // Used to set angle, this should be set as the starting angle
-    float getRate(); // Return the unbiased rate
+    void setAngle(double angle); // Used to set angle, this should be set as the starting angle
+    double getRate(); // Return the unbiased rate
 
     /* These are used to tune the Kalman filter */
-    void setQangle(float Q_angle);
+    void setQangle(double Q_angle);
     /**
-     * setQbias(float Q_bias)
+     * setQbias(double Q_bias)
      * Default value (0.003f) is in Kalman.cpp. 
      * Raise this to follow input more closely,
      * lower this to smooth result of kalman filter.
      */
-    void setQbias(float Q_bias);
-    void setRmeasure(float R_measure);
+    void setQbias(double Q_bias);
+    void setRmeasure(double R_measure);
 
-    float getQangle();
-    float getQbias();
-    float getRmeasure();
+    double getQangle();
+    double getQbias();
+    double getRmeasure();
 
 private:
     /* Kalman filter variables */
-    float Q_angle; // Process noise variance for the accelerometer
-    float Q_bias; // Process noise variance for the gyro bias
-    float R_measure; // Measurement noise variance - this is actually the variance of the measurement noise
-
-    float angle; // The angle calculated by the Kalman filter - part of the 2x1 state vector
-    float bias; // The gyro bias calculated by the Kalman filter - part of the 2x1 state vector
-    float rate; // Unbiased rate calculated from the rate and the calculated bias - you have to call getAngle to update the rate
+    double Q_angle; // Process noise variance for the accelerometer
+    double Q_bias; // Process noise variance for the gyro bias
+    double R_measure; // Measurement noise variance - this is actually the variance of the measurement noise
+
+    double angle; // The angle calculated by the Kalman filter - part of the 2x1 state vector
+    double bias; // The gyro bias calculated by the Kalman filter - part of the 2x1 state vector
+    double rate; // Unbiased rate calculated from the rate and the calculated bias - you have to call getAngle to update the rate
 
-    float P[2][2]; // Error covariance matrix - This is a 2x2 matrix
+    double P[2][2]; // Error covariance matrix - This is a 2x2 matrix
 };
 
 #endif

--- Kalman.cpp
+++ Kalman.cpp
@@ -19,21 +19,21 @@
 
 Kalman::Kalman() {
     /* We will set the variables like so, these can also be tuned by the user */
-    Q_angle = 0.001f;
-    Q_bias = 0.003f;
-    R_measure = 0.03f;
-
-    angle = 0.0f; // Reset the angle
-    bias = 0.0f; // Reset bias
-
-    P[0][0] = 0.0f; // Since we assume that the bias is 0 and we know the starting angle (use setAngle), the error covariance matrix is set like so - see: http://en.wikipedia.org/wiki/Kalman_filter#Example_application.2C_technical
-    P[0][1] = 0.0f;
-    P[1][0] = 0.0f;
-    P[1][1] = 0.0f;
+    Q_angle = 0.001;
+    Q_bias = 0.003;
+    R_measure = 0.03;
+
+    angle = 0.0; // Reset the angle
+    bias = 0.0; // Reset bias
+
+    P[0][0] = 0.0; // Since we assume that the bias is 0 and we know the starting angle (use setAngle), the error covariance matrix is set like so - see: http://en.wikipedia.org/wiki/Kalman_filter#Example_application.2C_technical
+    P[0][1] = 0.0;
+    P[1][0] = 0.0;
+    P[1][1] = 0.0;
 };
 
 // The angle should be in degrees and the rate should be in degrees per second and the delta time in seconds
-float Kalman::getAngle(float newAngle, float newRate, float dt) {
+double Kalman::getAngle(double newAngle, double newRate, double dt) {
     // KasBot V2  -  Kalman filter module - http://www.x-firm.com/?page_id=145
     // Modified by Kristian Lauszus
     // See my blog post for more information: http://blog.tkjelectronics.dk/2012/09/a-practical-approach-to-kalman-filter-and-how-to-implement-it
@@ -54,23 +54,23 @@
     // Discrete Kalman filter measurement update equations - Measurement Update ("Correct")
     // Calculate Kalman gain - Compute the Kalman gain
     /* Step 4 */
-    float S = P[0][0] + R_measure; // Estimate error
+    double S = P[0][0] + R_measure; // Estimate error
     /* Step 5 */
-    float K[2]; // Kalman gain - This is a 2x1 vector
+    double K[2]; // Kalman gain - This is a 2x1 vector
     K[0] = P[0][0] / S;
     K[1] = P[1][0] / S;
 
     // Calculate angle and bias - Update estimate with measurement zk (newAngle)
     /* Step 3 */
-    float y = newAngle - angle; // Angle difference
+    double y = newAngle - angle; // Angle difference
     /* Step 6 */
     angle += K[0] * y;
     bias += K[1] * y;
 
     // Calculate estimation error covariance - Update the error covariance
     /* Step 7 */
-    float P00_temp = P[0][0];
-    float P01_temp = P[0][1];
+    double P00_temp = P[0][0];
+    double P01_temp = P[0][1];
 
     P[0][0] -= K[0] * P00_temp;
     P[0][1] -= K[0] * P01_temp;
@@ -80,14 +80,14 @@
     return angle;
 };
 
-void Kalman::setAngle(float angle) { this->angle = angle; }; // Used to set angle, this should be set as the starting angle
-float Kalman::getRate() { return this->rate; }; // Return the unbiased rate
+void Kalman::setAngle(double angle) { this->angle = angle; }; // Used to set angle, this should be set as the starting angle
+double Kalman::getRate() { return this->rate; }; // Return the unbiased rate
 
 /* These are used to tune the Kalman filter */
-void Kalman::setQangle(float Q_angle) { this->Q_angle = Q_angle; };
-void Kalman::setQbias(float Q_bias) { this->Q_bias = Q_bias; };
-void Kalman::setRmeasure(float R_measure) { this->R_measure = R_measure; };
-
-float Kalman::getQangle() { return this->Q_angle; };
-float Kalman::getQbias() { return this->Q_bias; };
-float Kalman::getRmeasure() { return this->R_measure; };
+void Kalman::setQangle(double Q_angle) { this->Q_angle = Q_angle; };
+void Kalman::setQbias(double Q_bias) { this->Q_bias = Q_bias; };
+void Kalman::setRmeasure(double R_measure) { this->R_measure = R_measure; };
+
+double Kalman::getQangle() { return this->Q_angle; };
+double Kalman::getQbias() { return this->Q_bias; };
+double Kalman::getRmeasure() { return this->R_measure; };
